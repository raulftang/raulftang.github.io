<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://raulftang.github.io/atom.xml" rel="self"/>
  <link href="http://raulftang.github.io/"/>
  <updated>2014-06-30T16:13:27+08:00</updated>
  <id>http://raulftang.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Custom Attribute]]></title>
    <link href="http://raulftang.github.io/blog/2014/06/30/android-custom-attribute/"/>
    <updated>2014-06-30T16:11:07+08:00</updated>
    <id>http://raulftang.github.io/blog/2014/06/30/android-custom-attribute</id>
    <content type="html"><![CDATA[<p>Android中自定义属性的使用</p>

<p>做Android布局是件很享受的事，这得益于他良好的xml方式。使用xml可以快速有效的为软件定义界面。可是有时候我们总感觉官方定义的一些基本组件不够用，自定义组件就不可避免了。那么如何才能做到像官方提供的那些组件一样用xml来定义他的属性呢？现在我们就来讨论一下他的用法。</p>

<p>一、在res/values文件下定义一个attrs.xml文件，代码如下：</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;declare-styleable name="ToolBar"&gt; 
    &lt;attr name="buttonNum" format="integer"/&gt; 
    &lt;attr name="itemBackground" format="reference|color"/&gt; 
&lt;/declare-styleable&gt; 
</code></pre>

<p></resources></p>

<p>二、在布局xml中如下使用该属性:</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:toolbar="http://schemas.android.com/apk/res/cn.zzm.toolbar" 
android:orientation="vertical" 
android:layout_width="fill_parent" 
android:layout_height="fill_parent" 
&gt; 
&lt;cn.zzm.toolbar.ToolBar android:id="@+id/gridview_toolbar" 
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content" 
    android:layout_alignParentBottom="true" 
    android:background="@drawable/control_bar" 
    android:gravity="center" 
    toolbar:buttonNum="5" 
    toolbar:itemBackground="@drawable/control_bar_item_bg"/&gt; 
</code></pre>

<p></RelativeLayout></p>

<p>三、在自定义组件中，可以如下获得xml中定义的值：</p>

<p>TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.ToolBar);
buttonNum = a.getInt(R.styleable.ToolBar_buttonNum, 5);
itemBg = a.getResourceId(R.styleable.ToolBar_itemBackground, -1);</p>

<p>a.recycle();</p>

<p>就这么简单的三步，即可完成对自定义属性的使用。</p>

<hr />

<p>好了，基本用法已经讲完了，现在来看看一些注意点和知识点吧。</p>

<p>首先来看看attrs.xml文件。</p>

<p>该文件是定义属性名和格式的地方，需要用&lt;declare-styleable name=&ldquo;ToolBar&rdquo;>&lt;/declare-styleable>包围所有属性。其中name为该属性集的名字，主要用途是标识该属性集。那在什么地方会用到呢？主要是在第三步。看到没？在获取某属性标识时，用到&#8221;R.styleable.ToolBar_buttonNum&#8221;，很显然，他在每个属性前面都加了&#8221;ToolBar_&ldquo;。</p>

<p>在来看看各种属性都有些什么类型吧：string , integer , dimension , reference , color , enum.</p>

<p>前面几种的声明方式都是一致的，例如：<attr name="buttonNum" format="integer"/>。
只有enum是不同的，用法举例：</p>

<p><attr name="testEnum"></p>

<pre><code>&lt;enum name="fill_parent" value="-1"/&gt; 
&lt;enum name="wrap_content" value="-2"/&gt; 
</code></pre>

<p></attr></p>

<p>如果该属性可同时传两种不同的属性，则可以用“|”分割开即可。</p>

<p>让我们再来看看布局xml中需要注意的事项。</p>

<p>首先得声明一下：xmlns:toolbar=<a href="http://schemas.android.com/apk/res/cn.zzm.toolbar">http://schemas.android.com/apk/res/cn.zzm.toolbar</a>
注意，“toolbar”可以换成其他的任何名字，后面的url地址必须最后一部分必须用上自定义组件的包名。自定义属性了，在属性名前加上“toolbar”即可。</p>

<p>最后来看看java代码中的注意事项。</p>

<p>在自定义组件的构造函数中，用</p>

<p>TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.ToolBar);</p>

<p>来获得对属性集的引用，然后就可以用“a”的各种方法来获取相应的属性值了。这里需要注意的是，如果使用的方法和获取值的类型不对的话，则会返回默认值。因此，如果一个属性是带两个及以上不用类型的属性，需要做多次判断，知道读取完毕后才能判断应该赋予何值。当然，在取完值的时候别忘了回收资源哦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View Enter/leave Screen Animation]]></title>
    <link href="http://raulftang.github.io/blog/2014/06/30/android-view-enter-slash-leave-screen-animation/"/>
    <updated>2014-06-30T15:21:44+08:00</updated>
    <id>http://raulftang.github.io/blog/2014/06/30/android-view-enter-slash-leave-screen-animation</id>
    <content type="html"><![CDATA[<p>package com.feinno.jiosocial.ui.activitys.avchat;</p>

<p>import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Transformation;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.FrameLayout;</p>

<p>public class ExpandAnimation extends Animation {</p>

<pre><code>private View mView;
private ViewGroup.LayoutParams mViewLayoutParams;
private int mMarginStart, mMarginEnd;
private boolean mIsVisibleAfter = false;
private boolean mWasEndedAlready = false;
private boolean mFromBottom = false;

/**
 * Initialize the animation
 * @param view The layout we want to animate
 * @param duration The duration of the animation, in ms
 * @param fromBottom The layout is at the bottom or top of screen
 */
public ExpandAnimation(View view, int duration, boolean fromBottom) {
    setDuration(duration);
    mView = view;

    mViewLayoutParams = mView.getLayoutParams();
    int bMargin = 0;
    int tMargin = 0;
    if(mViewLayoutParams instanceof LinearLayout.LayoutParams) {
        bMargin = ((LinearLayout.LayoutParams)mViewLayoutParams).bottomMargin;
        tMargin = ((LinearLayout.LayoutParams)mViewLayoutParams).topMargin;
    } else if(mViewLayoutParams instanceof RelativeLayout.LayoutParams) {
        bMargin = ((RelativeLayout.LayoutParams)mViewLayoutParams).bottomMargin;
        tMargin = ((RelativeLayout.LayoutParams)mViewLayoutParams).topMargin;
    } else if(mViewLayoutParams instanceof FrameLayout.LayoutParams) {
        bMargin = ((FrameLayout.LayoutParams)mViewLayoutParams).bottomMargin;
        tMargin = ((FrameLayout.LayoutParams)mViewLayoutParams).topMargin;
    }
    // decide to show or hide the view

    mFromBottom = fromBottom;
    if(mFromBottom) {
        mMarginStart = bMargin;         
    } else {
        mMarginStart = tMargin;
    }

    if(mMarginStart == 0) {
        mMarginEnd = (0 - mView.getHeight()) - 1;
        mIsVisibleAfter = true;
    } else {
        mMarginEnd = 0;
        mIsVisibleAfter = false;
    }
    mView.setVisibility(View.VISIBLE);
}
</code></pre>

<!-- more -->


<pre><code>@Override
protected void applyTransformation(float interpolatedTime, Transformation t) {
    super.applyTransformation(interpolatedTime, t);

    int margin = 0;
    boolean needUpdate = false;
    if (interpolatedTime &lt; 1.0f) {
        // Calculating the new bottom margin
        margin = mMarginStart
                + (int) ((mMarginEnd - mMarginStart) * interpolatedTime);
        needUpdate = true;
    } else if(!mWasEndedAlready) {
        margin = mMarginEnd;
        needUpdate = true;
    }

    if(needUpdate) {
        if(mViewLayoutParams instanceof LinearLayout.LayoutParams) {
            if(mFromBottom) {
                ((LinearLayout.LayoutParams)mViewLayoutParams).bottomMargin = margin;
            } else {
                ((LinearLayout.LayoutParams)mViewLayoutParams).topMargin = margin;
            }

        } else if(mViewLayoutParams instanceof RelativeLayout.LayoutParams) {               
            if(mFromBottom) {
                ((RelativeLayout.LayoutParams)mViewLayoutParams).bottomMargin = margin;
            } else {
                ((RelativeLayout.LayoutParams)mViewLayoutParams).topMargin = margin;
            }

        } else if(mViewLayoutParams instanceof FrameLayout.LayoutParams) {              
            if(mFromBottom) {
                ((FrameLayout.LayoutParams)mViewLayoutParams).bottomMargin = margin;
            } else {
                ((FrameLayout.LayoutParams)mViewLayoutParams).topMargin = margin;
            }           
        }

        mView.requestLayout();
    }

    if (interpolatedTime &lt; 1.0f) {

    }else if (!mWasEndedAlready) {
        if (mIsVisibleAfter) {
            mView.setVisibility(View.GONE);
        }
        mWasEndedAlready = true;
    }
}
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
</feed>
